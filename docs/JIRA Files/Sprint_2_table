# Sprint 2 tickets table

| Story Number | Story Name                                                          | Story Points | Subtask Name                                                                           | Epic                                 | Priority |
| ------------ | ------------------------------------------------------------------- | ------------ | -------------------------------------------------------------------------------------- | ------------------------------------ | -------- |
| 1            | Implement Auth Controller - POST /register Route                    | 5            | - Define `/api/register` route for User Registration                                   | User Registration and Authentication | High     |
|              |                                                                     |              | - Validate input and hash password for User Registration                               |                                      |          |
|              |                                                                     |              | - Save user to database and return success response for User Registration              |                                      |          |
| 2            | Implement Auth Controller - POST /login Route                       | 5            | - Define `/api/login` route for User Login                                             | User Registration and Authentication | High     |
|              |                                                                     |              | - Validate credentials and generate JWT for User Login                                 |                                      |          |
|              |                                                                     |              | - Return JWT and user data for User Login                                              |                                      |          |
| 3            | Implement Auth Controller - PUT/DELETE /users/<id> Routes           | 5            | - Define `/api/users/<id>` route to update user information                            | User Registration and Authentication | High     |
|              |                                                                     |              | - Define `/api/users/<id>` route to delete user account                                |                                      |          |
|              |                                                                     |              | - Implement access control for user update and deletion                                |                                      |          |
| 4            | Implement Car Controller - GET /cars and /cars/<id> Routes          | 5            | - Define `GET /api/cars` to retrieve all cars                                          | Implement Basic API Endpoints        | High     |
|              |                                                                     |              | - Define `GET /api/cars/<id>` to retrieve a specific car by ID                         |                                      |          |
|              |                                                                     |              | - Return car data for car retrieval                                                    |                                      |          |
| 5            | Implement Car Controller - POST /cars Route                         | 5            | - Define `POST /api/cars` route to create a new car                                    | Implement Basic API Endpoints        | High     |
|              |                                                                     |              | - Validate input and save car data for car creation                                    |                                      |          |
|              |                                                                     |              | - Return success response for car creation                                             |                                      |          |
| 6            | Implement Car Controller - PUT/DELETE /cars/<id> Routes             | 5            | - Define `PUT /api/cars/<id>` route to update car details                              | Implement Basic API Endpoints        | High     |
|              |                                                                     |              | - Define `DELETE /api/cars/<id>` route to delete a car                                 |                                      |          |
|              |                                                                     |              | - Implement access control for car update and deletion                                 |                                      |          |
| 7            | Implement Listing Controller - GET /listings and /listings/<id>     | 5            | - Define `GET /api/listings` route to retrieve all listings                            | Implement Basic API Endpoints        | High     |
|              |                                                                     |              | - Define `GET /api/listings/<id>` to retrieve a specific listing by ID                 |                                      |          |
|              |                                                                     |              | - Return listing data for listing retrieval                                            |                                      |          |
| 8            | Implement Listing Controller - POST /listings Route                 | 5            | - Define `POST /api/listings` route to create a new listing                            | Implement Basic API Endpoints        | High     |
|              |                                                                     |              | - Validate input and save listing data for listing creation                            |                                      |          |
|              |                                                                     |              | - Return success response for listing creation                                         |                                      |          |
| 9            | Implement Listing Controller - PUT/DELETE /listings/<id> Routes     | 5            | - Define `PUT /api/listings/<id>` route to update listing details                      | Implement Basic API Endpoints        | High     |
|              |                                                                     |              | - Define `DELETE /api/listings/<id>` route to delete a listing                         |                                      |          |
|              |                                                                     |              | - Implement access control for listing update and deletion                             |                                      |          |
| 10           | Implement Car Transactions Controller - GET /transactions           | 5            | - Define `GET /api/car-transactions` route to retrieve all transactions                | Implement Basic API Endpoints        | High     |
|              |                                                                     |              | - Define `GET /api/car-transactions/<id>` to retrieve a specific transaction by ID     |                                      |          |
|              |                                                                     |              | - Return transaction data for car transactions retrieval                               |                                      |          |
| 11           | Implement Car Transactions Controller - POST /transactions Route    | 5            | - Define `POST /api/car-transactions` route to create a new transaction                | Implement Basic API Endpoints        | High     |
|              |                                                                     |              | - Validate input and save transaction data for car transactions                        |                                      |          |
|              |                                                                     |              | - Return success response for car transactions creation                                |                                      |          |
| 12           | Implement MakeModelYear Controller - GET Routes                     | 5            | - Define `GET /api/makemodelyear` route to retrieve all makes/models/years             | Implement Basic API Endpoints        | High     |
|              |                                                                     |              | - Define `GET /api/makemodelyear/<id>` to retrieve a specific make/model/year by ID    |                                      |          |
|              |                                                                     |              | - Return make/model/year data for retrieval                                            |                                      |          |
| 13           | Implement MakeModelYear Controller - POST /makemodelyear Route      | 5            | - Define `POST /api/makemodelyear` route to create a new make/model/year entry         | Implement Basic API Endpoints        | High     |
|              |                                                                     |              | - Validate input and save make/model/year data for creation                            |                                      |          |
|              |                                                                     |              | - Return success response for make/model/year creation                                 |                                      |          |
| 14           | Implement MakeModelYear Controller - PUT/DELETE /makemodelyear/<id> | 5            | - Define `PUT /api/makemodelyear/<id>` route to update make/model/year                 | Implement Basic API Endpoints        | High     |
|              |                                                                     |              | - Define `DELETE /api/makemodelyear/<id>` route to delete make/model/year              |                                      |          |
|              |                                                                     |              | - Implement access control for make/model/year update and deletion                     |                                      |          |
| 15           | Write README Introduction Section                                   | 2            | - Write project overview and introduction in README                                    | Testing and Documentation            | Medium   |
| 16           | Write README API Specifications Section                             | 2            | - Document API specifications (base URL, request/response formats, auth) in README     | Testing and Documentation            | Medium   |
| 17           | Write README Endpoints Section - One Endpoint at a Time             | 5            | - Document API endpoints (GET, POST, PUT, DELETE) one at a time in README              | Testing and Documentation            | High     |
| 18           | Write README Database Section                                       | 5            | - Add ERD diagram and document database schema (Users, Cars, Listings, etc.) in README | Testing and Documentation            | High     |
| 19           | Write README CLI Controller Section                                 | 2            | - Document CLI controller commands for managing the database (create, drop, seed)      | Testing and Documentation            | Medium   |
| 20           | Write README Security and Authorization Section                     | 2            | - Document JWT authentication and role-based access control in README                  | Advanced API Features and Security   | Medium   |
| 21           | Start Testing Process                                               | 5            | - Review routes and set up test cases in Postman/Insomnia for API testing              | Testing and Documentation            | High     |
| 22           | Create Tests for Endpoints                                          | 5            | - Write test cases for each API endpoint (GET, POST, PUT, DELETE)                      | Testing and Documentation            | High     |
| 23           | Create JSON File for Importing Tests in Insomnia                    | 2            | - Create JSON file to import test cases into Insomnia                                  | Testing and Documentation            | Medium   |
| 24           | Document Testing Process and Tests in README                        | 2            | - Document testing process and write-up for test cases in README                       | Testing and Documentation            | Medium   |
| 25           | Test All Endpoints in Insomnia/Postman                              | 5            | - Run all test cases in Insomnia/Postman and verify results                            | Testing and Documentation            | High     |
| 26           | Patch Issues Found During Testing                                   | 5            | - Fix bugs and issues found during testing of API endpoints                            | Advanced API Features and Security   | High     |
| 27           | Finalize Documentation and Code Clean-Up                            | 5            | - Finalize all README sections, clean up codebase, and prepare project for submission  | Project                              |

---

# New tickets

| Story Number | Story Name                                                   | Story Points | Subtask Name                                                                                                                                                                                                                                                                         | Epic                   | Priority |
| ------------ | ------------------------------------------------------------ | ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------- | -------- |
| 1            | Implement Auth Controller - One Route at a Time              | 5            | - Implement `POST /api/register` route<br>- Implement `POST /api/login` route<br>- Validate input and hash passwords<br>- Generate JWT tokens upon login<br>- Implement error handling and responses                                                                                 | User Authentication    | High     |
| 2            | Implement User Controller - PUT/DELETE /users/<id> Routes    | 5            | - Implement `PUT /api/users/<id>` route to update user information<br>- Implement `DELETE /api/users/<id>` route to delete user accounts<br>- Implement authorization checks<br>- Implement error handling and responses                                                             | User Management        | High     |
| 3            | Implement Car Controller - One Route at a Time               | 5            | - Implement `GET /api/cars` route<br>- Implement `GET /api/cars/<id>` route<br>- Implement `POST /api/cars` route<br>- Implement `PUT /api/cars/<id>` route<br>- Implement `DELETE /api/cars/<id>` route<br>- Validate inputs and implement authorization checks                     | Car Management         | High     |
| 4            | Implement Listing Controller - One Route at a Time           | 5            | - Implement `GET /api/listings` route<br>- Implement `GET /api/listings/<id>` route<br>- Implement `POST /api/listings` route<br>- Implement `PUT /api/listings/<id>` route<br>- Implement `DELETE /api/listings/<id>` route<br>- Validate inputs and implement authorization checks | Listing Management     | High     |
| 5            | Implement Car Transactions Controller                        | 5            | - Implement `GET /api/car-transactions` route<br>- Implement `GET /api/car-transactions/<id>` route<br>- Implement `POST /api/car-transactions` route<br>- Validate inputs and implement business logic<br>- Implement error handling and responses                                  | Transaction Management | High     |
| 6            | Implement MakeModelYear Controller - GET and POST Routes     | 5            | - Implement `GET /api/makemodelyear` route<br>- Implement `GET /api/makemodelyear/<id>` route<br>- Implement `POST /api/makemodelyear` route<br>- Validate inputs and implement authorization checks                                                                                 | Data Management        | High     |
| 7            | Implement MakeModelYear Controller - PUT/DELETE /<id> Routes | 5            | - Implement `PUT /api/makemodelyear/<id>` route<br>- Implement `DELETE /api/makemodelyear/<id>` route<br>- Implement authorization checks<br>- Implement error handling and responses                                                                                                | Data Management        | High     |
| 8            | Write README Introduction Section                            | 2            | - Write project overview and objectives<br>- Explain the purpose and scope of the API<br>- Include problem statement and use cases                                                                                                                                                   | Documentation          | Medium   |
| 9            | Write README API Specifications Section                      | 2            | - Document base URL and customization options<br>- Explain authentication and authorization mechanisms<br>- Describe supported formats and HTTP methods                                                                                                                              | Documentation          | Medium   |
| 10           | Write README Endpoints Section - One Endpoint at a Time      | 5            | - Document each API endpoint in detail<br>- Include allowed fields, restrictions, and examples<br>- Provide request and response samples                                                                                                                                             | Documentation          | High     |
| 11           | Write README Database Section                                | 5            | - Add Entity Relationship Diagram (ERD)<br>- Explain how the database works<br>- Document database schema and models                                                                                                                                                                 | Documentation          | High     |
| 12           | Document CLI Controllers in README                           | 2            | - Document CLI commands for database management<br>- Provide examples of how to use each command<br>- Explain error handling and expected outputs                                                                                                                                    | Documentation          | Medium   |
| 13           | Document Security and Authorization in README                | 2            | - Document JWT authentication process<br>- Explain role-based access control<br>- Include best practices for securing API keys                                                                                                                                                       | Documentation          | Medium   |
| 14           | Start Testing Process                                        | 5            | - Review all implemented routes<br>- Set up test cases in Insomnia<br>- Identify normal operations and edge cases                                                                                                                                                                    | Testing                | High     |
| 15           | Create Tests for Endpoints in Insomnia                       | 5            | - Write test cases for each endpoint<br>- Organize tests into logical groups<br>- Use environment variables for flexibility                                                                                                                                                          | Testing                | High     |
| 16           | Create JSON File for Importing Tests in Insomnia             | 2            | - Export test cases to a JSON file<br>- Ensure the file can be imported into Insomnia<br>- Include instructions for setting up environment variables                                                                                                                                 | Testing                | Medium   |
| 17           | Document Testing Process and Tests in README                 | 2            | - Document the testing procedure<br>- Include testing tables and expected outcomes<br>- Explain how to run and verify tests                                                                                                                                                          | Documentation          | Medium   |
| 18           | Test All Endpoints in Insomnia                               | 5            | - Run all test cases<br>- Verify responses and status codes<br>- Identify and log any issues found                                                                                                                                                                                   | Testing                | High     |
| 19           | Patch Issues Found During Testing                            | 5            | - Fix bugs and issues identified during testing<br>- Update code and documentation accordingly<br>- Retest to ensure issues are resolved                                                                                                                                             | Bug Fixing             | High     |
| 20           | Finalize Documentation and Code Clean-Up                     | 5            | - Complete all README sections<br>- Clean up codebase and remove redundancies<br>- Ensure code meets style guidelines<br>- Prepare project for submission                                                                                                                            | Project Completion     | High     |
